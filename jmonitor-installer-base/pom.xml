<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2010 the original author or authors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.jmonitor</groupId>
    <artifactId>jmonitor-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <artifactId>jmonitor-installer-base</artifactId>
  <name>JMonitor Installer Base</name>
  <description>The underlying installer which weaves JMonitor into Java EE ear and war files</description>

  <dependencies>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
    </dependency>
    <dependency>
      <groupId>net.sf.jopt-simple</groupId>
      <artifactId>jopt-simple</artifactId>
      <version>3.2</version>
    </dependency>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjtools</artifactId>
      <version>${aspectjtools.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.1</version>
        <executions>
          <execution>
            <id>copy-javaee-api</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/generated/resources</outputDirectory>
              <!--
                we strip the version since we need to know the exact jar file name inside Installer
                in order to read it via ClassLoader.getResourceAsStream()
              -->
              <stripVersion>true</stripVersion>
              <artifactItems>
                <artifactItem>
                  <groupId>javax</groupId>
                  <artifactId>javaee-api</artifactId>
                  <!--
                    it's ok to use java ee 6 since it is backwards compatible with applications
                    compiled against older versions of the spec
                  -->
                  <version>6.0</version>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!--
          adds ${project.build.directory}/generated/resources as a resource directory which contains
          the artifacts copied above
        -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <configuration>
          <resources>
            <resource>
              <directory>${project.build.directory}/generated/resources</directory>
            </resource>
          </resources>
        </configuration>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>add-resource</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>resources</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!--
          TODO can simplify by using jar or assembly plugin now
        -->
        <artifactId>maven-shade-plugin</artifactId>
        <version>1.3.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <createSourcesJar>true</createSourcesJar>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <reporting>
    <plugins>
      <plugin>
        <!-- overriding behavior inherited from jmonitor-parent -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <configuration>
          <excludeFilterFile>${basedir}/src/main/config/jmonitor-findbugs-exclude.xml</excludeFilterFile>
          <!--
            this is needed because jmonitor-installer-base has jar files (as resources) inside the
            classes dir and FindBugs scans nested jar files by default (see
            http://findbugs.sourceforge.net/manual/running.html#commandLineOptions)
          -->
          <classFilesDirectory>${project.build.outputDirectory}/org</classFilesDirectory>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>jdepend-maven-plugin</artifactId>
        <configuration>
          <!--
            this is needed because jmonitor-installer-base has jar files (as resources) inside the
            classes dir and JDepends scans nested jar files (similar to FindBugs above)
          -->
          <classDirectory>${project.build.outputDirectory}/org</classDirectory>
        </configuration>
      </plugin>
    </plugins>
  </reporting>
</project>
